// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Client {
  id                  Int           @id @default(autoincrement())
  name                String
  lastName            String        @map("last_name")
  dni                 String?
  email               String?
  phone               String
  direction           String?
  direction_reference String?       @map("direction_reference")
  note                String?
  Sale                Sale[]
  business            Business?     @relation(fields: [businessId], references: [id])
  businessId          Int?          @map("business_id")
  createdAt           DateTime      @default(now()) @map("created_at")
  deletedAt           DateTime?     @map("deleted_at")
  Transaction         Transaction[]
}

model Supplier {
  id                  Int                   @id @default(autoincrement())
  name                String
  lastName            String                @map("last_name")
  dni                 String?
  email               String?
  phone               String
  direction           String?
  direction_reference String?               @map("direction_reference")
  note                String?
  business            Business?             @relation(fields: [businessId], references: [id])
  businessId          Int                   @map("business_id")
  deletedAt           DateTime?             @map("deleted_at")
  TransactionSupplier TransactionSupplier[]
  Purchase            Purchase[]
  createdAt           DateTime              @default(now()) @map("created_at")
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  unitAlias        UnitAlias[]
  Sale             Sale[]
  business         Business           @relation(fields: [businessId], references: [id])
  businessId       Int                @map("business_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  unit             Unit               @relation(fields: [unitId], references: [id])
  unitId           Int                @map("unit_id")
  SaleLineItem     SaleLineItem[]
  PurchaseLineItem PurchaseLineItem[]
}

model Sale {
  id           Int            @id @default(autoincrement())
  total        Float
  client       Client?        @relation(fields: [clientId], references: [id])
  clientId     Int?           @map("client_id")
  business     Business       @relation(fields: [businessId], references: [id])
  businessId   Int            @map("business_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  isDispatched Boolean        @default(false) @map("is_dispatched")
  meta         Json
  lines        SaleLineItem[]
  canceledAt   DateTime?      @map("canceled_at")
  Product      Product?       @relation(fields: [productId], references: [id])
  productId    Int?
}

model Purchase {
  id         Int                @id @default(autoincrement())
  total      Float
  supplier   Supplier?          @relation(fields: [supplierId], references: [id])
  supplierId Int?               @map("supplier_id")
  business   Business           @relation(fields: [businessId], references: [id])
  businessId Int                @map("business_id")
  createdAt  DateTime           @default(now()) @map("created_at")
  meta       Json
  lines      PurchaseLineItem[]
  canceledAt DateTime?          @map("canceled_at")
}

model SaleLineItem {
  id        Int     @id @default(autoincrement())
  price     Float
  amount    Float
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  Sale      Sale?   @relation(fields: [saleId], references: [id])
  saleId    Int?

  meta Json?

  aliasId Int?       @map("alias_id")
  alias   UnitAlias? @relation(fields: [aliasId], references: [id])
}

model PurchaseLineItem {
  id         Int        @id @default(autoincrement())
  price      Float
  amount     Float
  productId  Int        @map("product_id")
  product    Product    @relation(fields: [productId], references: [id])
  purchaseId Int?       @map("purchase_id")
  purchase   Purchase?  @relation(fields: [purchaseId], references: [id])
  meta       Json?
  aliasId    Int?       @map("alias_id")
  alias      UnitAlias? @relation(fields: [aliasId], references: [id])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  total     Float
  paid      Boolean
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  Int?     @map("client_id")
  createdAt DateTime @default(now()) @map("created_at")
}

model TransactionSupplier {
  id         Int       @id @default(autoincrement())
  total      Float
  paid       Boolean
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId Int?      @map("supplier_id")
  createdAt  DateTime  @default(now()) @map("created_at")
}

model Unit {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  symbol        String
  allow_decimal Boolean     @default(false) @map("allow_decimal")
  unitAlias     UnitAlias[]
  Product       Product[]
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  name       String
  lastName   String    @map("last_name")
  phone      String?
  meta       Json?
  password   String
  roles      String[]
  business   Business? @relation(fields: [businessId], references: [id])
  businessId Int?      @map("business_id")
  createdAt  DateTime  @default(now()) @map("created_at")
}

model Business {
  id               Int        @id @default(autoincrement())
  name             String
  code             String?    @unique
  users            User[]
  clients          Client[]
  suppliers        Supplier[]
  products         Product[]
  sales            Sale[]
  createdAt        DateTime   @default(now()) @map("created_at")
  Purchase         Purchase[]
  anonymusClientId Int?       @map("client_empty_id")
}

model UnitAlias {
  id               Int                @id @default(autoincrement())
  name             String
  amount           Float
  unit             Unit               @relation(fields: [unitId], references: [id])
  unitId           Int                @map("unit_id")
  productId        Int                @map("product_id")
  product          Product            @relation(fields: [productId], references: [id])
  createdAt        DateTime           @default(now()) @map("created_at")
  SaleLineItem     SaleLineItem[]
  PurchaseLineItem PurchaseLineItem[]
}
